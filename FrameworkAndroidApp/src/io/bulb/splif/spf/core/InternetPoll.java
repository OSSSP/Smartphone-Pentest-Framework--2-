package io.bulb.splif.spf.core;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;

import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import android.os.Handler;
import android.os.SystemClock;
import android.util.Log;

public class InternetPoll extends SPFThread {

	private CommandHandler modem;

	public InternetPoll(String mip, String mkey, String mpath, Handler mhandler) {
		super(mip, mkey, mpath, mhandler);
		mConnected = false;// Set if it connect to server
		mRunning = true;// For thread stuff
		mActive = false;// Activated when it streams from server

		modem = new CommandHandler();

	}

	public void run() {
		// Perform thread commands...
		String http = "http://";

		String urii = "/getfunc";
		String uri = http.concat(ip);
		String uri2 = uri.concat(path);
		final String pullfrom = uri2.concat(urii);

		String url2 = "/getfuncuploader.php";
		String uri3 = http.concat(ip);
		String postto1 = uri3.concat(path);
		final String postto = postto1.concat(url2);
		Log.i(TAG, "Connection to " + pullfrom);
		URL url = null;

		try {
			url = new URL(pullfrom);
			while (mRunning) {
				SystemClock.sleep(1618);// sleeping phi millis
				BufferedReader in = new BufferedReader(new InputStreamReader(
						url.openStream()));

				if (getStop() == 1)
					break;

				if (in != null) {
					Log.i(TAG, "Stream open");
					String inputLine;
					
					sendToHandler("LOG" + "," + "Stream open");

					mActive = true;
					sendToHandler("ACTIVE" + "," + "Stream open");

					while ((inputLine = in.readLine()) != null) {
						Log.i(TAG, inputLine);
						sendToHandler("LOG" + "," + "Command : " + inputLine);

						if (inputLine.length() >= 7) {
							String checkkey = inputLine.substring(0, 7);
							if (checkkey.equals(key)) {
								/*
								 * Intent intent2 = new Intent(
								 * getApplicationContext(),
								 * CommandHandler.class);
								 * intent2.putExtra("message", inputLine);
								 * Context context = getApplicationContext();
								 * context.startService(intent2);
								 */
								modem.sendMSG(inputLine);

							}
						}
					}

					ArrayList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
					nameValuePairs.add(new BasicNameValuePair("text", ""));

					HttpClient httpclient = new DefaultHttpClient();

					HttpPost httppost = new HttpPost(postto);
					httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
					httpclient.execute(httppost);
					// HttpEntity entity = response.getEntity();
					// InputStream input = entity.getContent();

					in.close();
					/*
					 * is it possible to use those without extending services
					 * stopSelf();
					 */
					mConnected = false;
					mActive = false;

				}
			}
			stopThread(this);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
