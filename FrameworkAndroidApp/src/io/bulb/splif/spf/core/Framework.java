package io.bulb.splif.spf.core;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;

import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import android.app.Application;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Handler;
import android.os.SystemClock;
import android.util.Log;

public class Framework extends Application {

	/**
	 * TAG for LogCat
	 */
	private static final String TAG = "SPF";

	private String ip;
	private String key;
	private String path;

	private boolean mConnected;
	private boolean mActive;
	
	public CommandHandler modem;
	
	public Handler mLog;
	
	Client mClientThread;
	
	Connect mConnectThread;
	InternetPoll mStreamThread;
	WebUploadService2 mUploadThread;

	public String getControlIP() {
		return ip;
	}

	public String getKey() {
		return key;
	}

	public String getPath() {
		return path;
	}

	public void setIP(String serverip) {
		this.ip = serverip;
	}

	public void setKey(String ke) {
		this.key = ke;
	}

	public void setPath(String pa) {
		this.path = pa;
	}

	/**
	 * Return the connection state with SPF server
	 * @return
	 */
	public boolean isConnected() {
		return mStreamThread.mConnected;
	}
	
	/**
	 * Return state of the stream with the SPF server
	 * @return
	 */
	public boolean isActive() {
		return mStreamThread.mActive;
	}
	
	/**
	 * Stop the Framework application threads
	 * @param stop
	 */
	public void setStop(int stop) {
		mClientThread.setStop(stop);
		//mConnectThread.setStop(stop);
		//mStreamThread.setStop(stop);
		//mUploadThread.setStop(stop);
		
	}

	protected int getStop() {
		return mStreamThread.stop;
	}

	public Framework(String mip, String mkey, String mpath, Handler mhandler) {
		ip = mip;
		key = mkey;
		path = mpath;

		mConnected = false;// Set if it connect to server
		mActive = false;// Activated when it streams from server
		
		mLog = mhandler;
		
		modem = new CommandHandler();

		/*
		 * This fix the alarm manger and broadcast receiver Intent intent = new
		 * Intent(getApplicationContext(), ServiceAutoStarter.class);
		 * sendBroadcast(intent); see in the streamer class how to call
		 * broadcastreceiver
		 */
		doStart();

	}
	
	/**
	 * This is how the connection is established with the server 
	 */

	public void doStart() {
		
		doConnect();
		doStream();
		
		//doClient();
	}
	
	public void doClient() {
		Log.i(TAG, "Started Connection");

		mClientThread = new Client (ip, key, path, mLog);
		mClientThread.start();

	}

	public void doConnect() {
		Log.i(TAG, "Started Connection");

		mConnectThread = new Connect (ip, key, path, mLog);
		mConnectThread.start();

	}

	public void doStream() {

		Log.i(TAG, "Started Internetpoll");

		mStreamThread = new InternetPoll(ip, key, path, mLog);
		mStreamThread.start();
	}

	public void webUploadService(final String uploadstring) {

		mUploadThread = new WebUploadService2(ip, key, path, mLog, uploadstring);
		mUploadThread.start();
	}
}
